
# update this if you need everything to rebuild for backwards-incompatible changes
VERSION = v0.3.0
GCR_URL ?= us.gcr.io/vcm-ml
CUDA ?= n
TEST_ARGS ?=-v -s -rsx
FORTRAN_NAME = fv3core-build-fortran
WRAPPER_NAME = fv3core-build-wrapper
FV3CORE_NAME = fv3core
FV3CORE_WRAPPER_NAME = fv3core-wrapper

DEPENDENCIES_DOCKERFILE = dependencies.Dockerfile
FV3CORE_DOCKERFILE = Dockerfile

# fv3core or fv3core-wrapper
FV3CORE_TARGET ?= fv3core

BASE_IMAGE = ubuntu:18.04
# If trying to test the gtcuda backend, override the CUDA option
# and use the cuda based image
ifneq (,$(findstring gtcuda,$(TEST_ARGS)))
    CUDA_FLAGS = --gpus all
    CUDA = y
else
    CUDA_FLAGS =
endif


# base environment images w/ or w/o CUDA
ifeq ($(CUDA),n)
	BASE_IMAGE_ENV = ubuntu:18.04
	TAG_NAME = $(VERSION)-gnu7-mpich314-nocuda-develop
	GT4PY_OPTIONALS = ""
	ENV_CUDA_PATH = ""
else
	BASE_IMAGE_ENV = nvidia/cuda:10.2-devel-ubuntu18.04
	TAG_NAME = $(VERSION)-gnu7-mpich314-cuda102-develop
	GT4PY_OPTIONALS = "[cuda102]"
	ENV_CUDA_PATH = /usr/local/cuda/
endif

BUILD_ARGS += --network host --build-arg BASE_IMAGE=$(BASE_IMAGE)  --build-arg BASE_IMAGE_ENV=$(BASE_IMAGE_ENV)

# dependency image names, update sha to update version
TAG_SRC=$(VERSION)-srcfiles
GT4PY_IMAGE ?= $(GCR_URL)/gt4py-src:$(TAG_SRC)
MPI_IMAGE ?= $(GCR_URL)/mpi-build:$(TAG_SRC)
FMS_IMAGE ?= $(GCR_URL)/fms-build:$(TAG_SRC)
ESMF_IMAGE ?= $(GCR_URL)/esmf-build:$(TAG_SRC)
SERIALBOX_IMAGE ?= $(GCR_URL)/serialbox-build:$(TAG_SRC)
ENVIRONMENT_IMAGE ?= $(GCR_URL)/fv3core-environment:$(TAG_NAME)

# built image names
JENKINS_TAG ?=
FORTRAN_IMAGE = $(GCR_URL)/$(FORTRAN_NAME):$(TAG_NAME)$(JENKINS_TAG)
WRAPPER_IMAGE = $(GCR_URL)/$(WRAPPER_NAME):$(TAG_NAME)$(JENKINS_TAG)
FV3CORE_IMAGE ?= $(GCR_URL)/$(FV3CORE_NAME):$(TAG_NAME)$(JENKINS_TAG)
SARUS_FV3CORE_IMAGE ?= fv3core-$(TAG_NAME)$(JENKINS_TAG)
FV3CORE_WRAPPER_IMAGE ?= $(GCR_URL)/$(FV3CORE_WRAPPER_NAME):$(TAG_NAME)$(JENKINS_TAG)
